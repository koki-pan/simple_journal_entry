/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables;


import com.okeicalm.simpleJournalEntry.Keys;
import com.okeicalm.simpleJournalEntry.SimpleJournalEntryDb;
import com.okeicalm.simpleJournalEntry.tables.records.BallsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Balls extends TableImpl<BallsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>simple_journal_entry_db.balls</code>
     */
    public static final Balls BALLS = new Balls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BallsRecord> getRecordType() {
        return BallsRecord.class;
    }

    /**
     * The column <code>simple_journal_entry_db.balls.id</code>.
     */
    public final TableField<BallsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>simple_journal_entry_db.balls.name</code>.
     */
    public final TableField<BallsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>simple_journal_entry_db.balls.size</code>.
     */
    public final TableField<BallsRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>simple_journal_entry_db.balls.price</code>.
     */
    public final TableField<BallsRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    private Balls(Name alias, Table<BallsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Balls(Name alias, Table<BallsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>simple_journal_entry_db.balls</code> table
     * reference
     */
    public Balls(String alias) {
        this(DSL.name(alias), BALLS);
    }

    /**
     * Create an aliased <code>simple_journal_entry_db.balls</code> table
     * reference
     */
    public Balls(Name alias) {
        this(alias, BALLS);
    }

    /**
     * Create a <code>simple_journal_entry_db.balls</code> table reference
     */
    public Balls() {
        this(DSL.name("balls"), null);
    }

    public <O extends Record> Balls(Table<O> child, ForeignKey<O, BallsRecord> key) {
        super(child, key, BALLS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB;
    }

    @Override
    public Identity<BallsRecord, Long> getIdentity() {
        return (Identity<BallsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BallsRecord> getPrimaryKey() {
        return Keys.KEY_BALLS_PRIMARY;
    }

    @Override
    public Balls as(String alias) {
        return new Balls(DSL.name(alias), this);
    }

    @Override
    public Balls as(Name alias) {
        return new Balls(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Balls rename(String name) {
        return new Balls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Balls rename(Name name) {
        return new Balls(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
