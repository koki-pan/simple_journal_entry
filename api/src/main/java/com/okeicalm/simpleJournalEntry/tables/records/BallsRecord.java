/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables.records;


import com.okeicalm.simpleJournalEntry.tables.Balls;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BallsRecord extends UpdatableRecordImpl<BallsRecord> implements Record4<Long, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>simple_journal_entry_db.balls.id</code>.
     */
    public BallsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.balls.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>simple_journal_entry_db.balls.name</code>.
     */
    public BallsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.balls.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>simple_journal_entry_db.balls.size</code>.
     */
    public BallsRecord setSize(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.balls.size</code>.
     */
    public Integer getSize() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>simple_journal_entry_db.balls.price</code>.
     */
    public BallsRecord setPrice(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.balls.price</code>.
     */
    public Integer getPrice() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Balls.BALLS.ID;
    }

    @Override
    public Field<String> field2() {
        return Balls.BALLS.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Balls.BALLS.SIZE;
    }

    @Override
    public Field<Integer> field4() {
        return Balls.BALLS.PRICE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getSize();
    }

    @Override
    public Integer component4() {
        return getPrice();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getSize();
    }

    @Override
    public Integer value4() {
        return getPrice();
    }

    @Override
    public BallsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BallsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public BallsRecord value3(Integer value) {
        setSize(value);
        return this;
    }

    @Override
    public BallsRecord value4(Integer value) {
        setPrice(value);
        return this;
    }

    @Override
    public BallsRecord values(Long value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BallsRecord
     */
    public BallsRecord() {
        super(Balls.BALLS);
    }

    /**
     * Create a detached, initialised BallsRecord
     */
    public BallsRecord(Long id, String name, Integer size, Integer price) {
        super(Balls.BALLS);

        setId(id);
        setName(name);
        setSize(size);
        setPrice(price);
    }

    /**
     * Create a detached, initialised BallsRecord
     */
    public BallsRecord(com.okeicalm.simpleJournalEntry.tables.pojos.Balls value) {
        super(Balls.BALLS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setSize(value.getSize());
            setPrice(value.getPrice());
        }
    }
}
